<tool id="gedlab-khmer-normalize-by-median" name="Normalize By Median" version="0.7.1">
    
    <!-- [REQUIRED] Tool description displayed after the tool name -->
    <description>Filters fastq/fasta files using digital normalization via median k-mer abundances.</description>
    
    <!-- [OPTIONAL] 3rd party tools, binaries, modules... required for the tool to work -->
    <requirements>
        <requirement type="python-module" version="0.7.1">khmer</requirement>
    </requirements>
    
    <!-- [OPTIONAL] Command to be executed to get the tool's version string -->
    <version_command>
	    normalize-by-median.py --version
    </version_command>
    
    <!-- [REQUIRED] The command to execute -->
<command>
	#if $advanced_parameters.adv_param == "show"
	normalize-by-median.py --ksize=$ksize --n_hashes=$n_hashes --hashsize=$hashsize --cutoff=$cutoff $paired_switch --savehash=$hash --prefix=primary_${hashsize.id}_ --postfix _visible_${inputs[0].ext}
	#else
	normalize-by-median.py --ksize=20 --n_hashes=4 --hashsize=$hashsize --cutoff=20 --savehash=$hash $paired_switch --prefix=primary_${hashsize.id}_ --postfix=_visible_${inputs[0].ext}
	#end if
	#for $input in $inputs:
"${input}"
	#end for
</command>
        
    <!-- [REQUIRED] Input files and tool parameters -->
	<inputs> 
		<param name="inputs" multiple="true" type="data" format="fasta,fastq,fastqsanger,fastqsolexa,fastqillumina" label="FAST[AQ] file(s)" help="Put in order of precedence such as longest reads first." />
    
		<param name="paired_switch" type="boolean" checked="false" truevalue="-p" label="Are the inputs interleaved paired ends?" help="If so, then selecting this option will process the paired ends together." />
       
		<conditional name="advanced_parameters" >
            		<param name="adv_param" type="select" label="Advanced Parameters" help="" >
                		<option value="hide" selected="true">Hide</option>
                		<option value="show">Show</option>
            		</param>
			<when value="hide">
	    			<param name="hashsize" type="select" label="Sample Type" display="radio">
					<option value="1e9" selected="true">Microbial Genome</option>
					<option value="2e9"                >Animal Transcriptome</option>
					<option value="4e9"                >Small Animal Genome or Low-Diversity Metagenome</option>
					<option value="16e9"               >Large Animal Genome</option>
				</param>
			</when>
			<when value="show">
		                <param name="ksize" type="integer" value="20" label="ksize" help="k-mer size to use" />
				<param name="n_hashes" type="integer" min="1" value="4" label="n_hashes" help="number of hash tables to use" />
				<param name="hashsize" type="text" label="hashsize" help="lower bound on the hashsize to use" />
				<param name="cutoff" type="integer" min="1" value="20" label="cutoff" />
			</when>
		</conditional>
       </inputs>
    
    <!-- [REQUIRED] Output files -->
    <outputs>

	    <data name="hash"	format="data" label="${tool.name} on ${inputs} hash table" />

        
        <!-- When the tool doesn't allow output files handling with pointers, 
             but instead write these outputs to the disk with fixed names, use 
             the "frow_work_dir" attribute. In case of conditional names, 
             a wrapper may be developped to handle output files (eg. by 
             renaming with fixed names) -->
        <data name="output_dir" from_work_dir="tool_output_file.txt" label="Fixed name output" />
       
        
    </outputs>
    
    <!-- [STRONGLY RECOMMANDED] Exit code rules -->
    <stdio>
        <!-- [HELP] If no exit code rule is defined, the tool will stop if anything is written to STDERR -->
        <exit_code range="1:" level="fatal" />
    </stdio>
    
    <!-- [OPTIONAL] Tests to be run manually by the Galaxy admin -->
    <tests>
        <!-- [HELP] Test files have to be in the ~/test-data directory
        <test>
            <param name="input" value="input_test.tab" />
            <param name="int"   value="10" />
            <output name="output" file="output_test.txt" />
	</test> -->
        <!-- [HELP] Multiple tests can be defined with different parameters -->
<!--
        <test>
        </test>
-->
    </tests>
    
    <!-- [OPTIONAL] Help displayed in Galaxy -->
    <help>

.. class:: infomark

**Authors** First-name Name someone@somewhere.com

---------------------------------------------------

.. class:: infomark

**Please cite** If you use this tool, please cite `Author pub. Title and other. This is a bogus link &lt;http://www.ncbi.nlm.nih.gov/pubmed/23286517&gt;`_

---------------------------------------------------

==============
Tool Name
==============

-----------
Description
-----------

 | Description of the tool in 1 lines
 | or 2 lines


-----------------
Workflow position
-----------------

**Upstream tools**

====== =========== ======= ============
Name   output file format  parameter
====== =========== ======= ============
tool 1 outFile.tab tabular param name 1
tool 2 outFile.csv csv     param name 2
====== =========== ======= ============


**Downstream tools**

====== =========== =======
Name   output file format 
====== =========== =======
tool 1 outFile.tab tabular
tool 2 outFile.csv csv    
====== =========== =======


-----------
Input files
-----------

+-------------------------+-----------+
| Parameter : num + label |  Format   |
+=========================+===========+
| 1 : file1.tab           |  tabular  |
+-------------------------+-----------+
| 2 : file2.csv           |   csv     |
+-------------------------+-----------+

Constraints files : 
	* column 1 : description
	* column 5 : description


----------
Parameters
----------

parameter1
	Parameter 1 description

parameter2longer
	| Parameter 2 description
	| on 2 lines if needed


------------
Output files
------------

output.tab
	| File description
	| You can continue your analysis with the tool retcor or fillPeaks

outFile.csv
	File description

	
---------------------------------------------------

---------------
Working example
---------------

Input files
===========

| **These input files can be used in the purview "URL/Text:" of the tool "Get Data/Upload File",**
| **by checking the box "Convert spaces to tabs: YES"**

file1.txt
	Model input file::
	
		colonne1 colonne2 col3 etc
		element1.1 element1.2 el1.3 ...
		element2.1 elem2.2 el1.3 ...
		elem3.1 3.2 el1.3 ...

		
Parameters
==========

Parameter 1  -> **content**

Parameter 2  -> **content**


Output files
============

output.pdf

.. image:: ./static/images/output.png
        :width: 500
        :height: 400
	

output.txt

========== ========== ===== ===
colonne1   colonne 2  col3  etc
========== ========== ===== ===
element1.1 element1.2 el1.3 ...
element2.1 elem 2.2   el1.3 ...
elem3.1       3.2     el1.3 ...
========== ========== ===== ===


output.other::
	Something
	
---------------------------------------------------

.. class:: infomark

More information about formatting can be found here: http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html
    </help>
    
</tool>
